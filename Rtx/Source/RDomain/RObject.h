// Last modified by Mojtaba on June 30, 2012

#ifndef RObject_H
#define RObject_H

#include <QObject>
#include <QStringList>
#include <QVariant>
#include <QtDebug>
#include <QSharedPointer>
#include <QWeakPointer> //salarifard
#include <QPointer>

//#include "RPointer.h" //salarifard

#define WEB_PROTOTYPE
#define PLOT_PROTOTYPE

template <class T> class RPointer; //salarifard
class RParameter;
class RModel;
class RFunction;
class RLocation;
class QReadWriteLock;

class RObject : public QObject
{
	Q_OBJECT

	// Enum for the amount of output that is shown in the output pane; can be None, Minimum, Moderate, or Maximum
	Q_ENUMS(ROutputDisplayLevelType)

	// Enum for the type of the starting point in an analysis, e.g., a FORM analysis; can be Mean, Origin, or CurrentValue
	Q_ENUMS(RStartPointType)

	// Enum for the type of parameter; can be RandomVariable, DecisionVariable, Constant, or Response
	Q_ENUMS(RParameterType)

public:
	RObject(QObject *parent = 0, QString name = QString("RObject"));
	~RObject();

	// Declaring the ROutputDisplayLevelType enum values
	enum ROutputDisplayLevelType{None, Minimum, Moderate, Maximum};

	// Declaring the RStartPointType enum values
	enum RStartPointType{Mean, Origin, CurrentValue};

	// Declaring the RParameterType enum values
	enum RParameterType{RandomVariable, DecisionVariable, Constant, Response};

	// setter/getter for the output display levels
	ROutputDisplayLevelType getOutputDisplayLevel();
	virtual void setOutputDisplayLevel(ROutputDisplayLevelType value);

	// Indicates if the object is auto-generated
	bool isAutoGenerated();
	void setAutoGenerated(bool autoGenerated);

	// Sets the object name to the passed name
	virtual void setObjectName(const QString &name);

	// Checks if all the pointer meta-properties of the object are given
	int checkProperties();

	// Method that is invoked when a dynamic property is set to some value; the specific implementation of the method in sub-calsses should contain the operations that need to be carried out when the dynamic property is set; The name of the dynamic property must be added to the list in the method RDomain::getDynamicPropertyList()
	virtual void setDynamicProperty(QString propertyName, QVariant propertyValue);

	// Returns the list of items to be shown in the "right-click" menu of this object in the properties pane
	// For each item on the right-click menu, a "private slot" method with a similar name should be implemenetd in the sub-class with the follwoing rules:
	// 1. The name of the method should start with a lower-case letter
	// 2. The first letter of each word in the name of the method should be in upper-case
	// E.g., the right-clic item "Plot&PDF" requires implementing the method "void plotPDF()"
	virtual QStringList getActionList();

	// Copies the value at index 0 to the index of the given threadID for data members that are changed to array due to parallelization. Each subclass must also call the method of their superclass
	virtual void initializeForParallelComputation(int threadID);

	// Sets inUse flag to false, in the object and in all its qpropperties that are of the type RObject
	virtual void resetAfterParallelComputation();

	static QDebug rDebug(int threadID = 0);

	static QDebug rCritical(int threadID = 0);

	// Default is false, but must be reimplemented in parallelized classes to return true. This is needed to know if an analysis can be done parallely (if all contributing objects are parallelized)
	virtual bool canBeRunParallelly() = 0; //salarifard

	// Returns the shared pointer property of the object in order to create RPointers or RPointers from that
	QSharedPointer<RObject> getObjectSharedPointer();

	// Before deleting the internal shared pointer to the oobject must be dereferenced otherwie it won't let the deletion
	void dereferenceSharedPointerToDeleteObject();

protected:
	// Sets the double/parameter data members; If the passed valueStr is a number, the double data member is assigned, otherwise, the parameter data member is assigned
	void setStringParameter(QString valueStr, double *value, RPointer<RParameter> *valueParameter);

	// Returns a string that contains the double/parameter name; If the parameter data memebr is nu NULL, the name of the parameter is returned, otherwise, the double value is converted to a string and returned
	QString getStringParameter(double *value, RParameter *valueParameter);

	// Returns the actual value of the double/parameter data members in the given threadID ($MTh$); If the parameter data memebr is nu NULL, the current value of the parameter is returned, otherwise, the double value is returned
	double getDoubleParameter(double *value, RParameter *valueParameter, int threadID = 0);

	// sets the given value in the valueContainer and if valueParameter is not null, in the given threadID of it ($MTh$)
	void setDoubleParameter(double value, double * valueContainer, RParameter *valueParameter , int threadID);

	// Creats a string from a the object names of a list of parameters
	QString parameterListToString(QList<RPointer<RParameter> > passedList);

	// Creats a list of parameters from the passed string that contains their object names
	QList<RPointer<RParameter> > stringToParameterList(QString passedString);

	// Creats a string from a the object names of a list of models
	QString modelListToString(QList<RPointer<RModel> > passedList);

	// Creats a list of models from the passed string that contains their object names
	QList<RPointer<RModel> > stringToModelList(QString passedString);

	// Creats a string from a the object names of a list of functions
	QString functionListToString(QList<RPointer<RFunction> > passedList);

	// Creats a list of functions from the passed string that contains their object names
	QList<RPointer<RFunction> > stringToFunctionList(QString passedString);

	// Converts a pramater pointer to a locations pointer
	RLocation *parameterToLocation(RParameter *parameter);

	// Converts a list of pramater pointers to a list of locations pointers
	QList<RLocation *> parameterListToLocationList(QList<RPointer<RParameter> > parameterList, bool checkForDuplicates = false);

	// Creats a string from a the passed vector of integers
	QString intVectorToString(QVector<int> passedVector);

	// Creats a vector of integers from the passed string
	QVector<int> stringToIntVector(QString passedString);

	// Creats a string from a the passed vector of doubles
	QString doubleVectorToString(QVector<double> passedVector);

	// Creats a vector of doubles from the passed string
	QVector<double> stringToDoubleVector(QString passedString);

	// Auxiliary method to handle events that should happen when a dynamic property value is set
	bool event(QEvent *e);

	// Data member that indicates if the object is auto-generated
	bool theAutoGenerated;

	// Returns the suitable array size for parallel analysis
	int getArraySizeForParallelizedObject();

	// Returns true if all of the object's properties of the type QObject* can be run parallelly
	bool canAllQObjectStarPropertiesBeRunParallelly();

private:

	// Data member that stores the level of output to be displayed by analysis tools
	ROutputDisplayLevelType theOutputDisplayLevel;

	// a lock for safely changing the value of output display level via GUI
	QReadWriteLock * theOutputDisplayLevelLock;

	// a QSharedPointer to prevent the object from being removed and to allow creation of RPointer or RPointer on this pointer
	QSharedPointer<RObject> theObjectSharedPointer;

};

#endif // RObject_H
